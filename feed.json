{
    "version": "https://jsonfeed.org/version/1",
    "title": "Firevsice",
    "subtitle": "Hhhvvb的博客",
    "icon": "http://example.com/images/favicon.ico",
    "description": "Hhhvvb的博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/09/01/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/",
            "url": "http://example.com/2025/09/01/%E5%8F%8C%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/",
            "title": "关于双连通分量中桥的用法",
            "date_published": "2025-08-31T16:09:50.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlZm9yY2VzLmNvbS9jb250ZXN0LzIxMzIvcHJvYmxlbS9G\">例题: Codeforces Round 1043 (Div.3) F</span></p>\n<h2 id=\"简述思路\"><a class=\"anchor\" href=\"#简述思路\">#</a> 简述思路</h2>\n<ul>\n<li>使用 tarjan 算法标记出图中所有桥标记为集合 A</li>\n<li>找到一条从 1 到 n 的路径集合 B</li>\n<li>集合 A 与 B 的交集即为起点到终点所必经的点</li>\n<li>最后跑一遍多源 bfs 预处理出所有点的答案</li>\n</ul>\n<h3 id=\"找出桥的位置\"><a class=\"anchor\" href=\"#找出桥的位置\">#</a> 找出桥的位置</h3>\n<p>双连通分量中要注意的是如何判断当前所 dfs 的边不是<strong>当前点</strong>走向<strong>父节点</strong>的边，以及当且仅当 low [v] &gt; dfn [u] 时该边为桥。这里有两种处理方式:</p>\n<ol>\n<li>\n<p>建图时给每一条边给上编号，例如: [0, 1] 是一对相同的边的编号，[2, 3] 是一对相同的编号，查询时只需判断当前边异或上 1 是否等于上一条边，如果等于则当前遍历的边是走向父节点的点，需要 continue 掉.<br />\n<figure class=\"highlight c++\"><figcaption><span>法一</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建图</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">    adj[u].<span class=\"built_in\">push_back</span>(&#123;v, i &lt;&lt; <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">    adj[v].<span class=\"built_in\">push_back</span>(&#123;u, i &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询时</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> last)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; adj[u].<span class=\"built_in\">size</span>(); i ++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = adj[u][i][<span class=\"number\">0</span>], id = adj[u][i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((id ^ <span class=\"number\">1</span>) == last) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v, id);</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v] &gt; dfn[u]) &#123;</span><br><span class=\"line\">                is_bridge[id] = is_bridge[id ^ <span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n<li>\n<p>开一个数组用来存储每条边的两个点和一个用来存点可以到达的边的数组，这样查询时只需判断当前边的 id 是否是上一条边的 id 即可.<br />\n<figure class=\"highlight c++\"><figcaption><span>法二</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//建图</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">    cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">    edge[i] = &#123;u, v&#125;;</span><br><span class=\"line\">    g[u].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    g[v].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> last)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> id : g[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == last) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[id][<span class=\"number\">0</span>] + edge[id][<span class=\"number\">1</span>] - u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v]) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v, id);</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v] &gt; dfn[u]) is_bridge[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</li>\n</ol>\n<h3 id=\"找一条1-n的任意路径\"><a class=\"anchor\" href=\"#找一条1-n的任意路径\">#</a> 找一条 1-n 的任意路径</h3>\n<p>这里我们当然可以再次从 1 开始 dfs 一遍找到 n 后标记整条路径，但一种更巧妙的方式是在做 tarjan 时候找出这条路径。我们可以定义一个全局变量 <code>mark = 1</code> , 在进行 tarjan 前让 <code>path[u] ^= mark</code> , tarjan 后再让 <code>path[u] ^= mark</code> , 当找到 n 时标记 <code>mark = 0</code> . 为什么可以这样做呢？，我们可以想象 tarjan 就是一个 dfs 过程，只有第一次 dfs 到 n 的那一条路径中的元素是 tarjan 前 <code>path[u] ^= 1</code> , tarjan 后 (已经找到 n) <code>path[u] ^= 0</code> , 而未找到 n 的路径元素都是 <code>path[u] ^= 1</code> , 找到 n 后的所有路径元素都是 <code>path[u] ^= 0</code> , 故只有第一次遍历到 n 的路径上的元素是被标记为 1.<br />\n 代码实现如下:<br />\n<figure class=\"highlight c++\"><figcaption><span>找路径</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//找路径</span></span><br><span class=\"line\"><span class=\"type\">int</span> mark = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> last)</span> </span>&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == n) mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> id : g[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (id == last) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[id][<span class=\"number\">0</span>] + edge[id][<span class=\"number\">1</span>] - u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v]) &#123;</span><br><span class=\"line\">            path[id] ^= mark;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v, id);</span><br><span class=\"line\">            path[id] ^= mark;</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (low[v] &gt; dfn[u]) is_bridge[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化必经点\"><a class=\"anchor\" href=\"#初始化必经点\">#</a> 初始化必经点</h3>\n<p>用数组 ans 来存每个点到最近必经点是哪个，dist 数组为多源 bfs 中的距离数组.<br />\n<figure class=\"highlight c++\"><figcaption><span>初始化</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//初始化</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dist</span><span class=\"params\">(n + <span class=\"number\">1</span>, m + <span class=\"number\">1</span>)</span>, <span class=\"title\">ans</span><span class=\"params\">(n + <span class=\"number\">1</span>, m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (is_bridge[i] &amp;&amp; path[i]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = edge[i][<span class=\"number\">0</span>], v = edge[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist[u]) q.<span class=\"built_in\">push</span>(u);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist[v]) q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">        dist[u] = dist[v] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        ans[u] = <span class=\"built_in\">min</span>(ans[u], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ans[v] = <span class=\"built_in\">min</span>(ans[v], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"跑一遍简单的多源bfs\"><a class=\"anchor\" href=\"#跑一遍简单的多源bfs\">#</a> 跑一遍简单的多源 bfs</h3>\n<p>这里就是一个很简单的多源 bfs, 唯一要注意的点是依题意：当 <code>dist[u] == dist[v] + 1</code>  时我们要取 ans [u] 的最小值<br />\n <figure class=\"highlight c++\"><figcaption><span>多源bfs</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多源bfs</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">    q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> id : g[u]) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[id][<span class=\"number\">0</span>] + edge[id][<span class=\"number\">1</span>] - u;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dist[v] &gt; dist[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            dist[v] = dist[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans[v] = ans[u];</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dist[v] == dist[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ans[v] = <span class=\"built_in\">min</span>(ans[u], ans[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"ac代码\"><a class=\"anchor\" href=\"#ac代码\">#</a> AC 代码</h2>\n<p><figure class=\"highlight c++\"><figcaption><span>ac完整代码</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//完整代码</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> ll = <span class=\"type\">long</span> <span class=\"type\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;array&lt;<span class=\"type\">int</span>, 2&gt;&gt; <span class=\"built_in\">edge</span>(m);</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">g</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        edge[i] = &#123;u, v&#125;;</span><br><span class=\"line\">        g[u].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        g[v].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dfn</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">low</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">path</span><span class=\"params\">(m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">is_bridge</span><span class=\"params\">(m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> timestamp = <span class=\"number\">0</span>, mark = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; tarjan = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> last) &#123;</span><br><span class=\"line\">        dfn[u] = low[u] = ++ timestamp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u == n) mark = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> id : g[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (id == last) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[id][<span class=\"number\">0</span>] + edge[id][<span class=\"number\">1</span>] - u;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!dfn[v]) &#123;</span><br><span class=\"line\">                path[id] ^= mark;</span><br><span class=\"line\">                <span class=\"built_in\">tarjan</span>(v, id);</span><br><span class=\"line\">                path[id] ^= mark;</span><br><span class=\"line\">                low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (low[v] &gt; dfn[u]) is_bridge[id] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">tarjan</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dist</span><span class=\"params\">(n + <span class=\"number\">1</span>, m + <span class=\"number\">1</span>)</span>, <span class=\"title\">ans</span><span class=\"params\">(n + <span class=\"number\">1</span>, m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (is_bridge[i] &amp;&amp; path[i]) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = edge[i][<span class=\"number\">0</span>], v = edge[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[u]) q.<span class=\"built_in\">push</span>(u);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v]) q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">            dist[u] = dist[v] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ans[u] = <span class=\"built_in\">min</span>(ans[u], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            ans[v] = <span class=\"built_in\">min</span>(ans[v], i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> id : g[u]) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[id][<span class=\"number\">0</span>] + edge[id][<span class=\"number\">1</span>] - u;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist[v] &gt; dist[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                dist[v] = dist[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                ans[v] = ans[u];</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (dist[v] == dist[u] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                ans[v] = <span class=\"built_in\">min</span>(ans[u], ans[v]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> Q;</span><br><span class=\"line\">    cin &gt;&gt; Q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Q --) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x;</span><br><span class=\"line\">        cin &gt;&gt; x;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[x] != m + <span class=\"number\">1</span>) cout &lt;&lt; ans[x] &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>), cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> T = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T --) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": [
                "算法",
                "算法",
                "tarjan",
                "图论"
            ]
        }
    ]
}